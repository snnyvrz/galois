---
interface Item {
  name: string;
  value: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  highlight?: string;
  items?: Array<Item>;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  highlight,
  items = [],
} = Astro.props;
---

<div class="mx-auto max-w-6xl px-4 py-4 sm:px-6 md:px-24 md:py-16 lg:px-8 lg:py-20">
  {
    (title || subtitle || highlight) && (
      <div class="mb-10 max-w-xl sm:text-center md:mx-auto md:mb-12 lg:max-w-2xl">
        {highlight && (
          <p class="text-base font-semibold uppercase tracking-wide text-primary dark:text-blue-200">{highlight}</p>
        )}
        {title && (
          <h2
            class="mb-4 max-w-lg font-heading text-3xl font-bold leading-none tracking-tight sm:text-4xl md:mx-auto"
            set:html={title}
          />
        )}
        {subtitle && (
          <p class="text-muted mx-auto max-w-3xl text-center text-xl dark:text-slate-400" set:html={subtitle} />
        )}
      </div>
    )
  }
  <div class="row-gap-8 grid grid-cols-2 md:grid-cols-4">
    {
      items.map(({ name, value }) => (
        <div class="mb-12 text-center md:mb-0 md:border-r md:last:border-none dark:md:border-slate-500">
          <div class="font-heading text-[2.6rem] font-bold text-primary dark:text-blue-600 lg:text-5xl xl:text-6xl">
            {value}
          </div>
          <p class="text-sm font-medium uppercase tracking-widest text-gray-800 dark:text-slate-400 lg:text-base">
            {name}
          </p>
        </div>
      ))
    }
  </div>
</div>
